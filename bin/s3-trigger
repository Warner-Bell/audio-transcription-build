#!/bin/bash

# Variables - replace these with actual values or modify to accept inputs
INPUT_BUCKET_NAME="transcription-stack-input"         # S3 Bucket for input files
LAMBDA_FUNCTION_NAME="TranscribeAudioFunction"        # Name of the Lambda function
AWS_REGION="us-east-1"                                # AWS Region

# Step 1: Get the AWS Account ID dynamically
echo "Retrieving AWS Account ID..."

ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text --region "$AWS_REGION")

if [ $? -ne 0 ]; then
    echo "‚ùå Failed to retrieve AWS Account ID. Exiting."
    exit 1
fi

echo "‚úÖ Retrieved AWS Account ID: $ACCOUNT_ID"

# Step 2: Get the Lambda execution role dynamically
echo "Retrieving the execution role for Lambda function $LAMBDA_FUNCTION_NAME..."

ROLE_ARN=$(aws lambda get-function-configuration \
  --function-name "$LAMBDA_FUNCTION_NAME" \
  --query "Role" \
  --output text \
  --region "$AWS_REGION")

if [ $? -ne 0 ]; then
    echo "‚ùå Failed to retrieve Lambda execution role. Exiting."
    exit 1
fi

# Extract the role name from the ARN
ROLE_NAME=$(basename "$ROLE_ARN")
echo "‚úÖ Retrieved Lambda execution role: $ROLE_NAME"

# Step 3: Attach CloudWatch Logs permissions to Lambda execution role
echo "Attaching CloudWatch Logs permissions to the Lambda execution role $ROLE_NAME..."

aws iam put-role-policy \
  --role-name "$ROLE_NAME" \
  --policy-name "CloudWatchLogsPermissions" \
  --policy-document '{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:'"$AWS_REGION"':'"$ACCOUNT_ID"':log-group:/aws/lambda/'"$LAMBDA_FUNCTION_NAME"'*"
        ]
      }
    ]
  }'

if [ $? -eq 0 ]; then
    echo "‚úÖ Successfully attached CloudWatch Logs permissions to Lambda execution role."
else
    echo "‚ùå Failed to attach CloudWatch Logs permissions. Exiting."
    exit 1
fi

# Step 4: Set up S3 bucket notification to trigger Lambda on file upload
echo "Configuring S3 bucket notification for bucket $INPUT_BUCKET_NAME to trigger Lambda function $LAMBDA_FUNCTION_NAME on object creation..."

aws s3api put-bucket-notification-configuration \
  --bucket "$INPUT_BUCKET_NAME" \
  --notification-configuration '{
    "LambdaFunctionConfigurations": [
      {
        "Id": "TranscribeAudioTriggerMP4",
        "LambdaFunctionArn": "arn:aws:lambda:'"$AWS_REGION"':'"$ACCOUNT_ID"':function:'"$LAMBDA_FUNCTION_NAME"'",
        "Events": ["s3:ObjectCreated:*"],
        "Filter": {
          "Key": {
            "FilterRules": [
              {"Name": "suffix", "Value": ".mp4"}
            ]
          }
        }
      },
      {
        "Id": "TranscribeAudioTriggerMP3",
        "LambdaFunctionArn": "arn:aws:lambda:'"$AWS_REGION"':'"$ACCOUNT_ID"':function:'"$LAMBDA_FUNCTION_NAME"'",
        "Events": ["s3:ObjectCreated:*"],
        "Filter": {
          "Key": {
            "FilterRules": [
              {"Name": "suffix", "Value": ".mp3"}
            ]
          }
        }
      },
      {
        "Id": "TranscribeAudioTriggerWAV",
        "LambdaFunctionArn": "arn:aws:lambda:'"$AWS_REGION"':'"$ACCOUNT_ID"':function:'"$LAMBDA_FUNCTION_NAME"'",
        "Events": ["s3:ObjectCreated:*"],
        "Filter": {
          "Key": {
            "FilterRules": [
              {"Name": "suffix", "Value": ".wav"}
            ]
          }
        }
      }
    ]
  }'

if [ $? -eq 0 ]; then
    echo "‚úÖ Successfully configured S3 bucket notification to trigger Lambda function."
else
    echo "‚ùå Failed to configure S3 bucket notification. Exiting."
    exit 1
fi

echo "üéâ All actions completed successfully!"
